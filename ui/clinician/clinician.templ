package clinician

import (
	"github.com/kynrai/nhshackday-24/model"
	"fmt"
	"strings"
)

templ ClinicianView(tabType string, data model.Data, labs []model.SingleMtxReport) {
	<div id="clinician" class="flex h-screen">
		<div class="w-[15%] h-screen border-r border-gray-400 pr-10">
			<button
				class="px-4 py-2 rounded-lg w-fit bg-green-400"
				type="button"
			>Back to Patients</button>
			<div class="flex flex-col gap-2">
				<div class="text-lg font-semibold">Patient Profile</div>
				<div class="flex justify-between">
					<div class="font-medium">Name: </div>
					<div>Alan</div>
				</div>
				<div class="flex justify-between">
					<div class="font-medium">Age: </div>
					<div>33</div>
				</div>
				<div class="flex justify-between">
					<div class="font-medium">DOB: </div>
					<div>1/1/1999</div>
				</div>
				<div class="flex justify-between">
					<div class="font-medium">Gender: </div>
					<div>M</div>
				</div>
				<div class="flex justify-between">
					<div class="font-medium">Height: </div>
					<div>175cm</div>
				</div>
				<div class="flex justify-between">
					<div class="font-medium">Weight: </div>
					<div>65kg</div>
				</div>
				<div class="flex justify-between">
					<div class="font-medium">Ethnicity: </div>
					<div>White</div>
				</div>
				<div class="flex justify-between">
					<div class="font-medium">Language: </div>
					<div>English</div>
				</div>
			</div>
		</div>
		<div id="tab" class="flex flex-col w-[85%]">
			<nav class="h-10 w-full border-b border-gray-400">
				<ul class="ml-10 h-10 flex text-gray-500 cursor-pointer">
					<li
						hx-get={ "/hx/nav/" + "prescription" }
						hx-target="#clinician"
						hx-swap="morph:outerHTML"
						class={ "px-4 py-2 border border-gray-400 bg-gray-200 rounded-tl", templ.KV("border-b-white bg-white",tabType=="prescription"), templ.KV("hover:bg-blue-100",tabType!="prescription") }
					>
						Prescriptions
					</li>
					<li
						hx-get={ "/hx/nav/" + "lab" }
						hx-target="#clinician"
						hx-swap="morph:outerHTML"
						class={ "px-4 py-2 border-y border-gray-400 bg-gray-200",templ.KV("border-b-white bg-white",tabType=="lab"),templ.KV("hover:bg-blue-100",tabType!="lab") }
					>
						Lab Results
					</li>
					<li
						hx-get={ "/hx/nav/" + "appointment" }
						hx-target="#clinician"
						hx-swap="morph:outerHTML"
						class={ "px-4 py-2 border border-gray-400 bg-gray-200 rounded-tr",templ.KV("border-b-white bg-white",tabType=="appointment"),templ.KV("hover:bg-blue-100",tabType!="appointment") }
					>
						Appointments
					</li>
				</ul>
			</nav>
			<div class="mx-10 my-6">
				if tabType == "prescription" {
					@PrescriptionTable(data.Composition.MtxReport.Prescription)
				} else if tabType == "lab" {
					@TestTable(data.Composition.MtxReport.LabResults, labs)
				}
			</div>
		</div>
	</div>
}

templ PrescriptionTable(results model.Prescription) {
	<div class="flex flex-col border-2 border-red-500 w-full mb-6 p-4 gap-2">
		<div>
			Patient's next blood test for <span class="text-red-500">Methotrexate</span> is due on <span class="text-red-500">27/3/24</span>. Send a reminder to the patient to book an appointment?
		</div>
		<div class="flex gap-4">
			<button
				hx-get="/hx/sms-reminder"
				hx-swap="none"
				class="px-4 py-2 rounded-lg w-fit bg-green-400"
				type="button"
			>Send SMS</button>
			<button class="px-4 py-2 rounded-lg w-fit bg-green-400" type="button" hx-swap="none" hx-post="/notify">Send via App</button>
		</div>
	</div>
	<table class="table-fixed w-full mt-1 text-sm rounded-lg">
		<thead>
			<tr class="p-2 font-semibold bg-zinc-300 tracking-wide">
				<td class="p-2 border border-zinc-400 text-zinc-600">Medication</td>
				<td class="p-2 border border-zinc-400 text-zinc-600">Date started</td>
				<td class="p-2 border border-zinc-400 text-zinc-600">Date ended</td>
				<td class="p-2 border border-zinc-400 text-zinc-600">Dose</td>
				<td class="p-2 border border-zinc-400 text-zinc-600">Prescribed by</td>
				<td class="p-2 border border-zinc-400 text-zinc-600">Dispensed by</td>
				<td class="p-2 border border-zinc-400 text-zinc-600">Last blood test</td>
			</tr>
		</thead>
		<tbody>
			<tr class="align-top">
				<td class="p-2 border border-zinc-400">Methotrexate</td>
				<td class="p-2 border border-zinc-400">1/2/24</td>
				<td class="p-2 border border-zinc-400">-</td>
				<td class="p-2 border border-zinc-400">15mg</td>
				<td class="p-2 border border-zinc-400">Dr Andrew</td>
				<td class="p-2 border border-zinc-400">Esther</td>
				<td class="p-2 border border-zinc-400 text-zinc-600">13/3/24</td>
			</tr>
		</tbody>
	</table>
}

templ TestTable(results model.LabResults, labs []model.SingleMtxReport) {
	<div class="flex flex-col border-2 border-red-500 w-full mb-6 p-4 gap-2">
		<div>
			Patient's blood test results are not within the normal range. Send an alert to the patient to stop taking the medication immediately.
		</div>
		<div class="flex gap-4">
			<button
				hx-get="/hx/sms-alert"
				hx-swap="none"
				class="px-4 py-2 rounded-lg w-fit bg-green-400"
				type="button"
			>Send SMS</button>
			<button class="px-4 py-2 rounded-lg w-fit bg-green-400" type="button">Send via App</button>
		</div>
	</div>
	<table class="table-fixed w-full mt-1 text-sm rounded-lg">
		<thead>
			<tr class="p-2 font-semibold bg-zinc-300 tracking-wide">
				<td class="p-2 border border-zinc-400 text-zinc-600 w-[17%]">Lab</td>
				<td class="p-2 border border-zinc-400 text-zinc-600 w-[10%]">Ref Range</td>
				for _, lab := range labs {
					<td class="p-2 border border-zinc-400 text-zinc-600">{ lab.MtxReport.Context[0].StartTime[0].Format("1/2/06") }</td>
				}
			</tr>
		</thead>
		<tbody>
			@TestSection("Full Blood Count")
			<tr class="align-top">
				<td class="p-2 font-medium border border-zinc-400">Hemoglobin (g/L)</td>
				<td class="p-2 border border-zinc-400 w-1/6">{ labs[1].MtxReport.LabResults[0].FullBloodCount[0].Hb[0].ReferenceRangeGuidance[0] }</td>
				for i := 0; i <= 9; i++ {
					<td class="p-2 border border-zinc-400 w-1/6">{ fmt.Sprint(labs[i].MtxReport.LabResults[0].FullBloodCount[0].Hb[0].AnalyteResult[0].Magnitude) } </td>
				}
			</tr>
			<tr class="align-top">
				<td class="p-2 font-medium border border-zinc-400">White blood cell (10*9/L)</td>
				<td class="p-2 border border-zinc-400 w-1/6">{ labs[1].MtxReport.LabResults[0].FullBloodCount[0].TotalWhiteCellCount[0].ReferenceRangeGuidance[0] }</td>
				for i := 0; i <= 9; i++ {
					<td class="p-2 border border-zinc-400 w-1/6">{ fmt.Sprint(labs[i].MtxReport.LabResults[0].FullBloodCount[0].TotalWhiteCellCount[0].AnalyteResult[0].Magnitude) } </td>
				}
			</tr>
			<tr class="align-top">
				<td class="p-2 font-medium border border-zinc-400">Lymphocyte (10*9/L)</td>
				<td class="p-2 border border-zinc-400 w-1/6">{ labs[1].MtxReport.LabResults[0].FullBloodCount[0].Lymphocytes[0].ReferenceRangeGuidance[0] }</td>
				for i := 0; i <= 9; i++ {
					<td class="p-2 border border-zinc-400 w-1/6">{ fmt.Sprint(labs[i].MtxReport.LabResults[0].FullBloodCount[0].Lymphocytes[0].AnalyteResult[0].Magnitude) } </td>
				}
			</tr>
			<tr class="align-top">
				<td class="p-2 font-medium border border-zinc-400">Neutrophils (10*9/L)</td>
				<td class="p-2 border border-zinc-400 w-1/6">{ labs[1].MtxReport.LabResults[0].FullBloodCount[0].Neutrophils[0].ReferenceRangeGuidance[0] }</td>
				for i := 0; i <= 9; i++ {
					<td class="p-2 border border-zinc-400 w-1/6">{ fmt.Sprint(labs[i].MtxReport.LabResults[0].FullBloodCount[0].Neutrophils[0].AnalyteResult[0].Magnitude) } </td>
				}
			</tr>
			<tr class="align-top">
				<td class="p-2 font-medium border border-zinc-400">Platelet (10*9/L)</td>
				<td class="p-2 border border-zinc-400 w-1/6">{ labs[1].MtxReport.LabResults[0].FullBloodCount[0].Platelets[0].ReferenceRangeGuidance[0] }</td>
				for i := 0; i <= 9; i++ {
					<td class="p-2 border border-zinc-400 w-1/6">{ fmt.Sprint(labs[i].MtxReport.LabResults[0].FullBloodCount[0].Platelets[0].AnalyteResult[0].Magnitude) } </td>
				}
			</tr>
			@TestSection("Liver Function Test")
			<tr class="align-top">
				<td class="p-2 font-medium border border-zinc-400">AST (u/L)</td>
				<td class="p-2 border border-zinc-400 w-1/6">{ labs[1].MtxReport.LabResults[0].LiverFunctionTests[0].Ast[0].ReferenceRangeGuidance[0] }</td>
				for i := 0; i <= 9; i++ {
					<td class="p-2 border border-zinc-400 w-1/6">{ fmt.Sprint(labs[i].MtxReport.LabResults[0].LiverFunctionTests[0].Ast[0].AnalyteResult[0].Magnitude) } </td>
				}
			</tr>
			<tr class="align-top">
				<td class="p-2 font-medium border border-zinc-400">ALT (u/L)</td>
				<td class="p-2 border border-zinc-400 w-1/6">{ labs[1].MtxReport.LabResults[0].LiverFunctionTests[0].Alt[0].ReferenceRangeGuidance[0] }</td>
				for i := 0; i <= 9; i++ {
					<td class="p-2 border border-zinc-400 w-1/6">{ fmt.Sprint(labs[i].MtxReport.LabResults[0].LiverFunctionTests[0].Alt[0].AnalyteResult[0].Magnitude) } </td>
				}
			</tr>
			@TestSection("Urea & Electrolytes")
			<tr class="align-top">
				<td class="p-2 font-medium border border-zinc-400">Creatinine (umol/L)</td>
				<td class="p-2 border border-zinc-400 w-1/6">{ labs[1].MtxReport.LabResults[0].UreaAndElectrolytes[0].Creatinine[0].ReferenceRangeGuidance[0] }</td>
				for i := 0; i <= 9; i++ {
					<td class="p-2 border border-zinc-400 w-1/6">{ fmt.Sprint(labs[i].MtxReport.LabResults[0].UreaAndElectrolytes[0].Creatinine[0].AnalyteResult[0].Magnitude) } </td>
				}
			</tr>
			<tr class="align-top">
				<td class="p-2 font-medium border border-zinc-400">Sodium (mmol/L)</td>
				<td class="p-2 border border-zinc-400 w-1/6">{ labs[1].MtxReport.LabResults[0].UreaAndElectrolytes[0].Sodium[0].ReferenceRangeGuidance[0] }</td>
				for i := 0; i <= 9; i++ {
					<td class="p-2 border border-zinc-400 w-1/6">{ fmt.Sprint(labs[i].MtxReport.LabResults[0].UreaAndElectrolytes[0].Sodium[0].AnalyteResult[0].Magnitude) } </td>
				}
			</tr>
			<tr class="align-top">
				<td class="p-2 font-medium border border-zinc-400">Potassium (mmol/L)</td>
				<td class="p-2 border border-zinc-400 w-1/6">{ labs[1].MtxReport.LabResults[0].UreaAndElectrolytes[0].Potassium[0].ReferenceRangeGuidance[0] }</td>
				for i := 0; i <= 9; i++ {
					<td class="p-2 border border-zinc-400 w-1/6">{ fmt.Sprint(labs[i].MtxReport.LabResults[0].UreaAndElectrolytes[0].Potassium[0].AnalyteResult[0].Magnitude) } </td>
				}
			</tr>
			<tr class="align-top">
				<td class="p-2 font-medium border border-zinc-400">Urea (mmol/L)</td>
				<td class="p-2 border border-zinc-400 w-1/6">{ labs[1].MtxReport.LabResults[0].UreaAndElectrolytes[0].Urea[0].ReferenceRangeGuidance[0] }</td>
				for i := 0; i <= 9; i++ {
					<td class="p-2 border border-zinc-400 w-1/6">{ fmt.Sprint(labs[i].MtxReport.LabResults[0].UreaAndElectrolytes[0].Urea[0].AnalyteResult[0].Magnitude) } </td>
				}
			</tr>
		</tbody>
	</table>
}

func DateConverter(s string) string {
	date := s[:10]
	split := strings.Split(date, "-")
	return fmt.Sprintf("%v/%v/%v", split[2], split[1], split[0])
}

templ TestSection(title string) {
	<tr class="p-2 font-medium bg-zinc-200">
		<td class="p-2 w-1/6 text-zinc-600 border border-zinc-400">{ title }</td>
		for i := 0; i <=10; i++ {
			<td class="p-2 border border-zinc-400 w-1/6"></td>
		}
	</tr>
}
